#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define GER_COPY (LC(C)) 
#define GER_PASTE (LC(V)) 
#define GER_UNDO (LC(Y)) 
#define GER_REDO (LC(Z)) 
#define GER_CUT (LC(X)) 

#define WORD_LEFT (LC(LEFT)) 
#define WORD_RIGHT (LC(RIGHT)) 
#define DESK_LEFT (LG(LC(LEFT))) 
#define DESK_RIGHT (LG(LC(RIGHT))) 

/* German ä */
#define GER_UA (SINGLE_QUOTE)
 
/* German ü */
#define GER_UU (LEFT_BRACKET)

/* German ß */
#define GER_SZ (MINUS)

/* German ö */
#define GER_UO (SEMICOLON)

/* German ' */
#define GER_SQT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE)))

/* German < */
#define GER_LT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))

/* German > */
#define GER_GT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German " */
#define GER_DQT (AT)

/* German § */
#define GER_PARA (HASH)

/* German € */
#define GER_EURO (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_E)))

/* German & */
#define GER_AMPS (CARET)

/* German [ */
#define GER_LBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK)))

/* German ] */
#define GER_RBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS)))

/* German ( */
#define GER_LPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK))) 

/* German ) */
#define GER_RPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS))) 

/* German { */
#define GER_LBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_7_AND_AMPERSAND)))

/* German } */
#define GER_RBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German % */
#define GER_PERCENT (PERCENT) 

/* German - */
#define GER_MINUS (SLASH)

// German + */
#define GER_PLUS (RBKT)

// German + */
#define GER_CTRL_PLUS (LC(RBKT))

/* German = */
#define GER_EQUAL (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German # */
#define GER_HASH (BSLH)

/* German | */
#define GER_PIPE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German : */
#define GER_COLON (GT)

/* German ? */
#define GER_QUESTION (UNDERSCORE) 

/* German ~ */
#define GER_TILDE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))

/* German $ */
#define GER_DOLLAR (DOLLAR) 

/* German @ */
#define GER_AT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))

/* German / */
#define GER_SLASH (AMPERSAND)

/* German * (star) */
#define GER_STAR (RBRC)

/* German \ */
#define GER_BSLH (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))

/* German ^ */ 
#define GER_CHEVRON (GRAVE)

/ {
    behaviors {
      #include "macros.dtsi"

      // Macro for Caret (^) dead key
      GER_CARET: GER_CARET {
        label = "GER_CARET";
        #binding-cells = <0>;
        compatible = "zmk,behavior-macro";
        wait-ms = <100>;
        tap-ms = <5>;
        bindings = <&kp GRAVE &kp SPACE>;
      };

      // Macro for Backtick (`) dead key
      GER_BACKTICK: GER_BACKTICK {
        label = "GER_BACKTICK";
        #binding-cells = <0>;
        compatible = "zmk,behavior-macro";
        wait-ms = <100>;
        tap-ms = <5>;
        bindings = <&kp PLUS &kp SPACE>;
      };

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp ESC         &kp N1       &kp N2      &kp N3       &kp N4         &kp N5 &tog 1                                                                             &mo 2 &kp N6 &kp N7        &kp N8          &kp N9       &kp N0       &kp GER_SZ
        &kp GER_CHEVRON &kp Q        &kp W       &kp E        &kp R          &kp T  &none                                                                              &none &kp Y  &kp U         &kp I           &kp O        &kp P        &kp GER_UU
        &kp TAB         &kp A        &kp S       &kp D        &kp F          &kp G  &none          &kp INSERT &kp DEL      &kp LGUI   &kp GER_BSLH                     &none &kp H  &kp J         &kp K           &kp L        &kp GER_UO   &kp GER_UA
        &kp LSHFT       &kp Z        &kp X       &kp C        &kp V          &kp B                            &kp LALT     &kp RALT                                          &kp N  &kp M         &kp COMMA       &kp DOT      &kp FSLH     &kp RSHFT
        &kp LCTRL       &kp LEFT     &kp UP      &kp DOWN     &kp PRINTSCREEN                 &kp RSHFT &mo 1 &kp ESC      &kp BSPC   &kp RETURN &kp SPACE                          &kp DESK_LEFT &kp DESK_RIGHT  &kp GER_PLUS &kp GER_HASH &kp RCTRL
      >;
    };
    symbol_layer {
      bindings = <
        &kp F1     &kp F2          &kp F3         &kp F4       &kp F5        &kp F6        &tog 1                                                              &mo 2  &kp F7        &kp F8         &kp F9          &kp F10       &kp F11          &kp F12
        &trans     &kp GER_AT      &kp GER_PIPE   &kp GER_EURO &kp GER_DQT   &kp GER_SQT   &none                                                               &none  &kp GER_LT    &kp GER_GT     &kp GER_LBKT    &kp GER_RBKT  &kp GER_PERCENT  &trans
        &trans     &kp EXCLAMATION &kp GER_DOLLAR &kp GER_PLUS &kp GER_EQUAL &kp GER_AMPS  &none        &kp LCTRL &kp DEL  &kp LGUI  &kp RCTRL                 &none  &kp LEFT      &kp DOWN       &kp UP          &kp RIGHT     &kp GER_QUESTION &trans
        &kp LSHIFT &GER_CARET      &kp GER_SLASH  &kp GER_STAR &kp GER_BSLH  &GER_BACKTICK                        &kp LALT &kp RALT                                   &kp GER_LPAR  &kp GER_RPAR   &kp GER_LBRC    &kp GER_RBRC  &kp GER_TILDE    &kp RSHIFT
        &kp LCTRL  &trans          &trans         &trans       &trans                          &kp RSHFT &trans   &trans   &kp BSPC  &kp RETURN &kp SPACE                           &trans         &trans          &trans        &trans           &kp RCTRL
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
  };
};