#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define GER_COPY (LC(C)) 
#define GER_PASTE (LC(V)) 
#define GER_UNDO (LC(Y)) 
#define GER_REDO (LC(Z)) 
#define GER_CUT (LC(X)) 

#define WORD_LEFT (LC(LEFT)) 
#define WORD_RIGHT (LC(RIGHT)) 
#define DESK_LEFT (LG(LC(LEFT))) 
#define DESK_RIGHT (LG(LC(RIGHT))) 

/* German ' */
#define GER_SQT (PIPE)

/* German < */
#define GER_LT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))

/* German > */
#define GER_GT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German " */
#define GER_DQT (AT)

/* German § */
#define GER_PARA (HASH)

/* German € */
#define GER_EURO (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_E)))

/* German & */
#define GER_AMPS (CARET)

/* German [ */
#define GER_LBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK)))

/* German ] */
#define GER_RBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS)))

/* German ( */
#define GER_LPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK))) 

/* German ) */
#define GER_RPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS))) 

/* German { */
#define GER_LBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_7_AND_AMPERSAND)))

/* German } */
#define GER_RBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German % */
#define GER_PERCENT (PERCENT) 

/* German - */
#define GER_MINUS (SLASH)

// German + */
#define GER_PLUS (RBKT)

/* German = */
#define GER_EQUAL (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German # */
#define GER_HASH (BSLH)

/* German | */
#define GER_PIPE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German : */
#define GER_COLON (GT)

/* German ? */
#define GER_QUESTION (UNDERSCORE) 

/* German ~ */
#define GER_TILDE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))

/* German $ */
#define GER_DOLLAR (DOLLAR) 

/* German @ */
#define GER_AT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))

// Backtick (`) dead key
#define GER_BACKTICK (GT)
/*ZMK_BEHAVIOR(GER_BACKTICK, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp PLUS &kp SPACE>;
)*/

// Caret (^) dead key
#define GER_CARET (GT)
/*ZMK_BEHAVIOR(GER_CARET, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp GRAVE &kp SPACE>;
)*/


/ {
    behaviors {
      #include "macros.dtsi"

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp EQUAL &kp N1       &kp N2      &kp N3       &kp N4         &kp N5 &tog 1                                                           &mo 3 &kp N6 &kp N7        &kp N8          &kp N9          &kp N0       &kp MINUS
        &kp TAB   &kp Q        &kp W       &kp E        &kp R          &kp T  &none                                                            &none &kp Y  &kp U         &kp I           &kp O           &kp P        &kp BSLH
        &kp ESC   &kp A        &kp S       &kp D        &kp F          &kp G  &none           &kp LCTRL &kp DEL  &kp LGUI  &kp RCTRL           &none &kp H  &kp J         &kp K           &kp L           &kp SEMI     &kp SQT
        &kp LSHFT &kp Z        &kp X       &kp C        &kp V          &kp B                            &kp LALT &kp RALT                            &kp N  &kp M         &kp COMMA       &kp DOT         &kp FSLH     &kp RSHFT
        &mo 2     &kp GER_UNDO &kp GER_CUT &kp GER_COPY &kp GER_PASTE         &kp SPACE &mo 2 &kp BSPC  &mo 1    &kp RSHFT &kp RETURN                       &kp DESK_LEFT &kp DESK_RIGHT  &kp PRINTSCREEN &kp GER_REDO &kp RCTRL
      >;
    };
    symbol_layer {
      bindings = <
        &kp F1    &kp F2          &kp F3        &kp F4       &kp F5        &kp F6        &tog 1                                                              &mo 3  &kp F7        &kp F8         &kp F9          &kp F10       &kp F11          &kp F12
        &trans    &kp GER_SQT     &kp GER_LT    &kp GER_GT   &kp GER_DQT   &kp GER_PARA  &none                                                               &none  &kp GER_EURO  &kp GER_AMPS   &kp GER_LBKT    &kp GER_RBKT  &kp GER_PERCENT  &trans
        &trans    &kp EXCLAMATION &kp GER_MINUS &kp GER_PLUS &kp GER_EQUAL &kp GER_HASH  &none        &kp LCTRL &kp DEL  &kp LGUI  &kp RCTRL                 &none  &kp GER_PIPE  &kp GER_COLON  &kp GER_LPAR    &kp GER_RPAR  &kp GER_QUESTION &trans
        &trans    &kp GER_CARET   &kp GER_SLASH &kp GER_STAR &kp GER_BSLH  &kp GER_BACKTICK                     &kp LALT &kp RALT                                   &kp GER_TILDE &kp GER_DOLLAR &kp GER_LBRC    &kp GER_RBRC  &kp GER_AT       &trans
        &trans    &trans          &trans        &trans       &trans                          &kp SPACE &trans   &kp BSPC  &trans &kp RSHFT &kp RETURN                             &trans         &trans          &trans        &trans           &trans
      >;
    };
    fn {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                           &mo 3 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans  &none                                           &none &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &none        &trans &trans &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans &trans                     &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
  };
};
